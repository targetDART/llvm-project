stages:          # List of stages for jobs, and their order of execution
  - build
  - compile
  - run
  - deploy


.base:
  tags: ["hpc"]
  id_tokens:
    HPC_CI_TOKEN:
      aud: aixCIlenz
  before_script:
    - ml purge
    - ml GCCcore binutils hwloc libxml2 ncurses GMP Z3 libffi elfutils CUDA Ninja gompi

.exec:
  extends: .base
  before_script:
    - ml purge
    - ml GCCcore binutils hwloc libxml2 ncurses GMP Z3 libffi elfutils CUDA gompi
    - export PATH=$PATH:$PWD/software/bin
    - export PATH=$PATH:$PWD/software/llvm/16/bin
    - export LIBRARY_PATH=$PWD/software/llvm/16/lib:$LIBRARY_PATH
    - export LD_LIBRARY_PATH=$PWD/software/llvm/16/lib:$LD_LIBRARY_PATH
    - export PSM2_CUDA=1


build-job:       # This job runs in the build stage, which runs first.
  extends: .base
  stage: build
  variables:
    SLURM_PARAM_CORES: "-c 48"
    SLURM_PARAM_TIME:  "-t 2:00:00"
    SLURM_PARAM_ACCOUNT: "-A rwth1447"
    SLURM_DPARAM_TIME:  "-t 2:00:00"
    SLURM_DPARAM_ACCOUNT: "-A rwth1447"
    GIT_DEPTH: "1"
  script:
    - ls -la $TMP/..
    - export SOURCES=$PWD/llvm
    - mkdir -p $TMP/build-llvm
    - cd $TMP/build-llvm
    - | 
      if [[ ! -f "CMakeCache.txt" ]]; then
        cmake -G Ninja $SOURCES \
           -DCMAKE_BUILD_TYPE=Release\
           -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra;openmp;lldb;' \
           -DLLVM_ENABLE_RUNTIMES='compiler-rt;libcxx;libcxxabi' \
           -DGCC_INSTALL_PREFIX=$GCCcore_ROOT \
           -DCMAKE_INSTALL_PREFIX=$TMP/software/llvm/16 \
           -DLLVM_INSTALL_UTILS=ON \
           -DCMAKE_CXX_COMPILER='mpicxx' \
           -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_60 \
           -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=35,60,70 \
           -DCMAKE_CXX_FLAGS='-g'
       fi
    - ninja -j48 install
    - cd -
    - cp $TMP/software/llvm/16/lib/libomptarget.so.16 .
    - tar -cvzf $TMP/software/llvm/16/lib libs.tar.gz
    - tar -cvzf $TMP/software/llvm/16/lib/clang/16/include includes.tar.gz
    - rm -rf $TMP/build-llvm
    - rm -rf $TMP/software
  artifacts:
    paths:
      - libomptarget.so.16
      - includes.tar.gz
      - libs.tar.gz

compile-helloworld-job:
  extends: .exec
  stage: compile
  dependencies: [build-job]
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir software
    - mkdir software/bin
    - mkdir software/lib
    - tar -xzf includes.tar.gz
    - mv -r include software/.
    - cp libomptarget.so.16 software/lib/libomptarget.so.16
    - echo '#!/bin/bash\n\nclang++ -L$PWD/software/lib/libomptarget.so.16 -I$PWD/software/include/ -fopenmp -fopenmp-targets=nvptx64-nvidia-cuda -Xopenmp-target -march=sm_70 $@' > software/bin/clangwrap
    - git clone git@github.com:targetDART/TargetDART_Applications.git
    - clangwrap TargetDART_Applications/simple_examples/00notquitehelloworld.cpp -o 00notquitehelloworld.exe  
  artifacts:
    paths:
      - 00notquitehelloworld.exe

run-helloworld-job:
  extends: .exec
  stage: run
  dependencies: [compile-helloworld-job]
  variables:
    GIT_STRATEGY: none
    SLURM_PARAM_CORES: "-c 48"
    SLURM_PARAM_TIME:  "-t 2:00:00"
    SLURM_PARAM_ACCOUNT: "-A rwth1447"
    SLURM_PARAM_NODES: "-n 2"
    SLURM_PARAM_GPUS: "--gres=gpu:volta:2"
  script:
    - TD_MANAGEMENT=0,1,2,3 OMP_PLACES="4:44" srun --gres=gpu:volta:2 -c 48 -n 2 00notquitehelloworld.exe
